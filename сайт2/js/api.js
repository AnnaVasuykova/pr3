import { uploadImageToSupabase } from './supabase-rest.js'

function getNextGoodId(goods) {
    if (goods.length === 0) return 1;
    const maxId = Math.max(...goods.map(p => p.id));
    return maxId + 1;
}


function getNextUserId(users) {
    if (users.length === 0) return 1;
    const maxId = Math.max(...users.map(u => u.id));
    return maxId + 1;
}


export async function getGoods() {
    try {
        const localData = localStorage.getItem('goods');
        if (localData) {
            const data = JSON.parse(localData);
            return data.goods || [];
        }
        return [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
        return [];
    }
}


async function saveGoods(goods) {
    try {
        localStorage.setItem('goods', JSON.stringify({ goods }));
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        return false;
    }
}


export async function getUsers() {
    try {
        const localData = localStorage.getItem('users');
        if (localData) {
            return JSON.parse(localData).users || [];
        }
        return [];
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        return [];
    }
}


async function saveUsers(users) {
    try {
        localStorage.setItem('users', JSON.stringify({ users }));
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        return false;
    }
}


export async function addGood(product, imageFile = null) {
    try {
        console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä...', product);
        
        let imageUrl = product.image;
        
        
        if (imageFile) {
            try {
                console.log('üñºÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Supabase...');
                imageUrl = await uploadImageToSupabase(imageFile);
                console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', imageUrl);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                imageUrl = URL.createObjectURL(imageFile);
            }
        }
        
        const goods = await getGoods();
        const newProduct = {
            ...product,
            id: getNextGoodId(goods), 
            image: imageUrl
        };
        
        goods.push(newProduct);
        await saveGoods(goods);
        
        console.log('‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ localStorage:', newProduct);
        return newProduct;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        throw error;
    }
}


export async function updateGood(id, updatedProduct, imageFile = null) {
    try {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä...', id);
        
        const goods = await getGoods();
        const index = goods.findIndex(p => p.id == id);
        
        if (index === -1) {
            throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        let imageUrl = updatedProduct.image;
        
        if (imageFile) {
            try {
                imageUrl = await uploadImageToSupabase(imageFile);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                imageUrl = URL.createObjectURL(imageFile);
            }
        }
        
        goods[index] = { 
            ...goods[index], 
            ...updatedProduct,
            image: imageUrl 
        };
        
        await saveGoods(goods);
        return goods[index];
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        throw error;
    }
}


export async function deleteGood(id) oods[index], 
        ...updatedProduct,
        image: imageUrl 
    }
    
    await saveGoods(goods)
    return goods[index]
}

export async function deleteGood(id) {
    const goods = await getGoods()
    const filteredGoods = goods.filter(p => p.id != id)
    
    if (filteredGoods.length === goods.length) {
        throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    await saveGoods(filteredGoods)
    return true
}

// CRUD –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export async function addUser(user) {
    const users = await getUsers()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º
    if (users.find(u => u.login === user.login)) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }
    
    const newUser = {
        ...user,
        id: Date.now(),
        role: user.role || 'user'
    }
    
    users.push(newUser)
    await saveUsers(users)
    return newUser
}

export async function updateUser(id, updatedUser) {
    const users = await getUsers()
    const index = users.findIndex(u => u.id == id)
    
    if (index === -1) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    users[index] = { ...users[index], ...updatedUser }
    await saveUsers(users)
    return users[index]
}

export async function deleteUser(id) {
    const users = await getUsers()
    const user = users.find(u => u.id == id)
    
    if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    
    if (user.role === 'admin') {
        throw new Error('–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    }
    
    const filteredUsers =